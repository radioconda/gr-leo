/*
 * Copyright 2022 Free Software Foundation, Inc.
 *
 * This file is part of gr-leo
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(leo_types.h)                                               */
/* BINDTOOL_HEADER_FILE_HASH(0)                                                    */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/leo/leo_types.h>
#include <string>

void bind_leo_types(py::module& m)
{
    py::class_<gr::leo::pass_details_t, std::shared_ptr<gr::leo::pass_details_t>>(
        m, "pass_details_t")
        .def(py::init<>())
        .def_readwrite("aos", &gr::leo::pass_details_t::aos)
        .def_readwrite("los", &gr::leo::pass_details_t::los)
        .def_readwrite("max_elevation", &gr::leo::pass_details_t::max_elevation)
        .def("__repr__",
             [](const gr::leo::pass_details_t &p) {
                 return "pass_details_t(aos=" + p.aos + ", los=" + p.los + ", max_elevation=" + std::to_string(p.max_elevation) + ")";
             }
         );

    py::enum_<gr::leo::impairment_enum_t>(m, "impairment_enum_t")
        .value("IMPAIRMENT_NONE", gr::leo::impairment_enum_t::IMPAIRMENT_NONE)
        .value("ATMO_GASES_ITU", gr::leo::impairment_enum_t::ATMO_GASES_ITU)
        .value("ATMO_GASES_REGRESSION", gr::leo::impairment_enum_t::ATMO_GASES_REGRESSION)
        .value("PRECIPITATION_ITU", gr::leo::impairment_enum_t::PRECIPITATION_ITU)
        .value("PRECIPITATION_CUSTOM", gr::leo::impairment_enum_t::PRECIPITATION_CUSTOM)
        .value("FREE_SPACE_PATH_LOSS", gr::leo::impairment_enum_t::FREE_SPACE_PATH_LOSS)
        .value("ANTENNA_POINTING_LOSS", gr::leo::impairment_enum_t::ANTENNA_POINTING_LOSS)
        .value("DOPPLER_SHIFT", gr::leo::impairment_enum_t::DOPPLER_SHIFT)
        .export_values();

    py::enum_<gr::leo::noise_t>(m, "noise_t")
        .value("NOISE_NONE", gr::leo::noise_t::NOISE_NONE)
        .value("WHITE_GAUSSIAN", gr::leo::noise_t::WHITE_GAUSSIAN)
        .export_values();

    py::enum_<gr::leo::polarization_t>(m, "polarization_t")
        .value("RHCP", gr::leo::polarization_t::RHCP)
        .value("LHCP", gr::leo::polarization_t::LHCP)
        .value("LINEAR_VERTICAL", gr::leo::polarization_t::LINEAR_VERTICAL)
        .value("LINEAR_HORIZONTAL", gr::leo::polarization_t::LINEAR_HORIZONTAL)
        .export_values();

    py::enum_<gr::leo::antenna_t>(m, "antenna_t")
        .value("YAGI", gr::leo::antenna_t::YAGI)
        .value("HELIX", gr::leo::antenna_t::HELIX)
        .value("PARABOLIC_REFLECTOR", gr::leo::antenna_t::PARABOLIC_REFLECTOR)
        .value("CANTED_TURNSTYLE", gr::leo::antenna_t::CANTED_TURNSTYLE)
        .value("CUSTOM", gr::leo::antenna_t::CUSTOM)
        .value("MONOPOLE", gr::leo::antenna_t::MONOPOLE)
        .value("DIPOLE", gr::leo::antenna_t::DIPOLE)
        .value("QUADRIFILAR_HELIX", gr::leo::antenna_t::QUADRIFILAR_HELIX)
        .export_values();

    py::enum_<gr::leo::link_mode_t>(m, "link_mode_t")
        .value("UPLINK", gr::leo::link_mode_t::UPLINK)
        .value("DOWNLINK", gr::leo::link_mode_t::DOWNLINK)
        .export_values();

    py::implicitly_convertible<int, gr::leo::impairment_enum_t>();
    py::implicitly_convertible<int, gr::leo::noise_t>();
    py::implicitly_convertible<int, gr::leo::polarization_t>();
    py::implicitly_convertible<int, gr::leo::antenna_t>();
    py::implicitly_convertible<int, gr::leo::link_mode_t>();
}
