# auto-generated by grc.converter

id: variable_antenna
label: Antenna
flags: [show_id]

parameters:
-   id: value
    label: Ignore Me
    dtype: raw
    default: '"ok"'
    hide: all
-   id: type
    label: Type
    dtype: int
    default: '0'
    options: ['0', '1', '2', '3', '4', '5', '6']
    option_labels: [Yagi, Helix, Parabolic reflector, Custom, Monopole, Dipole, Quadrifilar
            Helix]
-   id: frequency
    label: Frequency (Hz)
    dtype: real
-   id: polarization
    label: Polarization
    dtype: int
    default: '0'
    options: ['0', '1', '2', '3']
    option_labels: [RHCP, LHCP, LINEAR VERTICAL, LINEAR HORIZONTAL]
-   id: boom_length
    label: Boom length (m)
    dtype: real
    default: '0'
    hide: ${ ('none' if int(type)==0 else 'all') }
-   id: turns
    label: Turns
    dtype: int
    default: '0'
    hide: ${ ('none' if int(type)==1 else 'all') }
-   id: turn_spacing
    label: Turn spacing (m)
    dtype: real
    default: '0'
    hide: ${ ('none' if int(type)==1 else 'all') }
-   id: circumference
    label: Circumference (m)
    dtype: real
    default: '0'
    hide: ${ ('none' if int(type)==1 else 'all') }
-   id: diameter
    label: Diameter (m)
    dtype: real
    default: '0'
    hide: ${ ('none' if int(type)==2 else 'all') }
-   id: aperture_efficiency
    label: Aperture efficiency (%)
    dtype: real
    default: '0'
    hide: ${ ('none' if int(type)==2 else 'all') }
-   id: lp
    label: Loop (m)
    dtype: real
    default: '0.5'
    hide: ${ ('none' if int(type)==6 else 'all') }
-   id: gain
    label: Gain (dBiC)
    dtype: real
    default: '0'
    hide: ${ ('none' if int(type)==3 else 'all') }
-   id: rolloff_gain
    label: Roll-Off Gain (dB)
    dtype: real
    default: '0'
    hide: ${ ('none' if int(type)==3 else 'all') }
-   id: beamwidth
    label: Beamwidth (degrees)
    dtype: real
    default: '0'
    hide: ${ ('none' if int(type)==3 else 'all') }
-   id: pointing_error
    label: Pointing Error (Degrees)
    dtype: real
    default: '0'
value: ${ value }

templates:
    imports: import gnuradio.leo
    var_make: |-
        % if int(type)==0:
        self.${id} = ${id} = gnuradio.leo.antenna.yagi_antenna.make(${type},\
        ${frequency}, ${polarization}, ${pointing_error}, ${boom_length})\
        % elif int(type)==1:
        self.${id} = ${id} = gnuradio.leo.antenna.helix_antenna.make(${type}, ${frequency},\
        ${polarization}, ${pointing_error}, ${turns}, ${turn_spacing}, ${circumference})\
        % elif int(type)==2:
        self.${id} = ${id} = gnuradio.leo.antenna.parabolic_reflector_antenna.make(${type}, ${frequency}, ${polarization},\
        ${pointing_error}, ${diameter}, ${aperture_efficiency})\
        % elif int(type)==3:
        self.${id} = ${id} = gnuradio.leo.antenna.custom_antenna.make(${type},\
        ${frequency}, ${polarization}, ${pointing_error}, ${gain}, ${beamwidth}, ${rolloff_gain})\
        % elif int(type)==4:
        self.${id} = ${id} = gnuradio.leo.antenna.monopole_antenna.make(${type}, ${frequency}, ${polarization}, ${pointing_error})\
        % elif int(type)==5:
        self.${id} = ${id} = gnuradio.leo.antenna.dipole_antenna.make(${type}, ${frequency}, ${polarization}, ${pointing_error})\
        % elif int(type)==6:
        self.${id} = ${id} = gnuradio.leo.antenna.quadrifilar_helix_antenna.make(${type},\
        ${frequency}, ${polarization}, ${pointing_error}, ${lp})\
        % else:
        print \"Invalid antenna type\"\nraise RuntimeError\n% endif \n  "
        % endif
    callbacks:
    - set_pointing_error(${pointing_error})

file_format: 1
